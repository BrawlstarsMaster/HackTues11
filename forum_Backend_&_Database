// Import dependencies
const express = require("express");
const { Pool } = require("pg");

// Initialize Express app and PostgreSQL pool
const app = express();
const pool = new Pool({
  user: "your_db_user",
  host: "your_db_host",
  database: "your_db_name",
  password: "your_db_password",
  port: 5432,
});

// Middleware
app.use(express.json());

// Endpoint to save doctor visit summary
app.post("/save-doctor-form", async (req, res) => {
  try {
    const {
      patientId,
      diagnosis,
      prescriptions,
      needFollowUp,
      followUpDate,
      recoveryNotes,
      visitCost,
      preparations,
    } = req.body;

    // Insert visit summary into the database
    const result = await pool.query(
      `INSERT INTO visits (patient_id, diagnosis, need_followup, followup_date, recovery_notes, visit_cost, preparations)
       VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id`,
      [patientId, diagnosis, needFollowUp, followUpDate, recoveryNotes, visitCost, preparations]
    );

    const visitId = result.rows[0].id;

    // Insert prescriptions into the database
    if (prescriptions.length > 0) {
      const prescriptionQueries = prescriptions.map((presc) => {
        return pool.query(
          `INSERT INTO prescriptions (visit_id, medicine, dosage, frequency, duration)
           VALUES ($1, $2, $3, $4, $5)`,
          [visitId, presc.medicine, presc.dosage, presc.frequency, presc.duration]
        );
      });
      await Promise.all(prescriptionQueries);
    }

    res.status(201).json({ message: "Visit summary saved!" });
  } catch (error) {
    console.error("Error saving visit summary:", error);
    res.status(500).json({ error: "Error saving visit summary" });
  }
});

// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

// SQL Schema for PostgreSQL
/*
CREATE TABLE visits (
  id SERIAL PRIMARY KEY,
  patient_id VARCHAR(255) NOT NULL,
  diagnosis TEXT NOT NULL,
  need_followup BOOLEAN NOT NULL,
  followup_date DATE,
  recovery_notes TEXT,
  visit_cost DECIMAL(10,2),
  preparations TEXT
);

CREATE TABLE prescriptions (
  id SERIAL PRIMARY KEY,
  visit_id INTEGER REFERENCES visits(id) ON DELETE CASCADE,
  medicine VARCHAR(255) NOT NULL,
  dosage VARCHAR(50) NOT NULL,
  frequency VARCHAR(50) NOT NULL,
  duration VARCHAR(50) NOT NULL
);
*/
